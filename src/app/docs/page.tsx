import { DocsLayout } from "@/components/layout/DocsLayout";

export default function DocsPage() {
  return (
    <DocsLayout>
      <h1 className="text-gradient">Bondi Protocol Documentation</h1>
      
      <section id="introduction">
        <h2>Introduction</h2>
        <p>
          Welcome to the official documentation for the Bondi Protocol. Bondi is a decentralized framework designed for collective asset ownership on the blockchain. It provides a suite of tools and smart contracts that enable groups to securely pool capital, acquire digital or real-world assets, and manage ownership in a transparent, liquid, and automated manner.
        </p>
        <p>
          Our mission is to democratize access to high-value assets by breaking down the barriers of high capital requirements and complex legal overhead. Whether you&apos;re a developer building on top of our protocol, an investment DAO, or a group of friends, Bondi provides the foundational layer for the future of group investment.
        </p>
      </section>

      <hr />

      <section id="core-concepts">
        <h2>Core Concepts</h2>
        <p>
          Understanding these core concepts is key to leveraging the full power of the Bondi Protocol.
        </p>
        <h3>The Bond</h3>
        <p>
          A <strong>Bond</strong> is the central primitive of the protocol. It is an isolated, single-purpose smart contract vault created to fund and acquire a specific asset. Each Bond has a clearly defined set of on-chain rules:
        </p>
        <ul>
          <li><strong>Funding Target:</strong> The total amount of capital required to purchase the asset.</li>
          <li><strong>Contribution Token:</strong> The specific cryptocurrency (e.g., ETH, USDC) used for contributions.</li>
          <li><strong>Contribution Period:</strong> The timeframe during which participants can deposit funds.</li>
          <li><strong>Asset Target:</strong> The on-chain identifier or legal wrapper of the asset to be acquired.</li>
        </ul>
        <p>
          If the funding target is not met within the defined period, all contributors can withdraw their funds trustlessly.
        </p>

        <h3>Fractional Tokens</h3>
        <p>
          Upon successful acquisition of an asset, the Bond mints a new set of <strong>Fractional Tokens</strong> (typically ERC-20 or ERC-1155). These tokens represent a direct, proportional ownership stake in the underlying asset held by the Bond.
        </p>
        <p>
          These tokens are liquid and can be freely traded on secondary markets, transferred between wallets, or used in other DeFi protocols. This provides an exit mechanism for investors without requiring the sale of the entire underlying asset.
        </p>

        <h3>On-Chain Governance</h3>
        <p>
          Each Bond functions as a micro-DAO. Ownership of Fractional Tokens grants voting rights on key decisions concerning the asset. All proposals and votes are conducted on-chain, ensuring a transparent and tamper-proof governance process. Common proposals include:
        </p>
        <ul>
            <li>Initiating a buyout or sale of the underlying asset.</li>
            <li>Distributing revenue generated by the asset.</li>
            <li>Amending certain parameters of the Bond (where permissible).</li>
        </ul>
      </section>

      <hr />

      <section id="architecture">
        <h2>Protocol Architecture</h2>
        <p>
          The Bondi Protocol is built on a modular and security-first architecture. Given your background in computer architecture and low-level concepts, you&apos;ll appreciate the design choices made to ensure robustness and decentralization.
        </p>
        <div className="glass rounded-xl p-6 my-6 border border-border">
            <h4>Key Principles</h4>
            <ul>
                <li><strong>Non-Custodial:</strong> At no point does the Bondi team or any single entity have custody of user funds. All capital is held in the smart contract vaults, controlled by code.</li>
                <li><strong>Immutability:</strong> Core contract logic is immutable, preventing unauthorized changes to the rules of a deployed Bond.</li>
                <li><strong>Atomicity:</strong> Asset acquisition and token fractionalization occur as a single, atomic transaction to prevent front-running and partial-state failures.</li>
            </ul>
        </div>
        <h3>The Bond Factory</h3>
        <p>
          The `BondFactory` is a singleton contract responsible for deploying new, isolated Bond contracts. This factory pattern ensures that each Bond is created from a verified template, reducing gas costs and minimizing the attack surface. When a new Bond is created, the factory records its address in a public registry.
        </p>
        <h3>The Bond Contract</h3>
        <p>
          Each deployed Bond contract manages the entire lifecycle of a single asset. It contains several key modules:
        </p>
        <ul>
            <li><strong>Funding Module:</strong> Handles the logic for `deposit()` and `withdraw()` functions during the contribution period. It enforces the funding target and timeline.</li>
            <li><strong>Acquisition Module:</strong> Interacts with external protocols (e.g., NFT marketplaces, RWA platforms) to execute the asset purchase once the funding goal is met.</li>
            <li><strong>Tokenization Module:</strong> Manages the minting and distribution of Fractional Tokens to contributors based on their share.</li>
            <li><strong>Governance Module:</strong> A lightweight implementation of a voting system (e.g., Governor Bravo style) tied to the Fractional Token&apos;s supply.</li>
        </ul>
      </section>

      <hr />

      <section id="getting-started">
        <h2>Getting Started</h2>
        <p>
          Interacting with the Bondi Protocol can be done through our official dApp or directly with the smart contracts. Hereâ€™s a typical user flow:
        </p>
        <h4>1. Creating a Bond</h4>
        <p>
          To propose a new asset for co-ownership, a user calls the `createBond()` function on the `BondFactory` contract, providing the necessary parameters (funding target, asset details, etc.). This deploys a new Bond contract and makes it discoverable.
        </p>
        <h4>2. Contributing to a Bond</h4>
        <p>
          Users can browse active Bonds and contribute by calling the `deposit()` function on the specific Bond contract they wish to support. This requires an approval transaction for the contribution token first.
        </p>
        <h4>3. Claiming Fractional Tokens</h4>
        <p>
          Once an asset is successfully acquired, contributors can call the `claimTokens()` function on the Bond to receive their proportional share of the newly minted Fractional Tokens.
        </p>
      </section>

      <hr />

      <section id="security">
        <h2>Security</h2>
        <p>
          Security is the highest priority for the Bondi Protocol. As a cybersecurity student, you understand the importance of a multi-layered defense strategy.
        </p>
        <h3>Smart Contract Audits</h3>
        <p>
          The entire codebase has undergone rigorous, independent security audits from reputable firms. Audit reports are publicly available for review. We maintain an ongoing relationship with security researchers to ensure the protocol remains secure.
        </p>
        <h3>Bug Bounty Program</h3>
        <p>
          We run a competitive bug bounty program through platforms like Immunefi to incentivize white-hat hackers to find and report vulnerabilities responsibly.
        </p>
        <h3>Best Practices</h3>
        <p>
          Our contracts are developed following the latest security best practices, including:
        </p>
        <ul>
            <li>Checks-Effects-Interactions pattern to prevent re-entrancy attacks.</li>
            <li>Use of OpenZeppelin&apos;s battle-tested libraries for core components like ERC-20 and access control.</li>
            <li>Comprehensive test suite with 100% branch coverage.</li>
            <li>Time-locks on critical administrative functions.</li>
        </ul>
      </section>
    </DocsLayout>
  );
}
